/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 05 05:49:32 GMT 2018
 */

package com.catalyte.training.hotel_room_booking.Controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.catalyte.training.hotel_room_booking.Controllers.ReservationController;
import com.catalyte.training.hotel_room_booking.Entities.Reservation;
import com.catalyte.training.hotel_room_booking.Repositories.ReservationRepository;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReservationController_ESTest extends ReservationController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        ReservationController.sendPostRequest(mockDate0, mockDate0, "=u=%NRcHc,3VM", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // protocol doesn't support output
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      Reservation reservation0 = new Reservation();
      MockDate mockDate0 = new MockDate();
      reservation0.setEndDate(mockDate0);
      // Undeclared exception!
      try { 
        reservationController0.addReservation(reservation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      // Undeclared exception!
      try { 
        reservationController0.updateRoomsInUse(";=n*]I<K4>wxM/\u0007`Q", 223);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find: localhost
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      // Undeclared exception!
      try { 
        reservationController0.updateRoomsInUse((String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ArrayList<Reservation> arrayList0 = new ArrayList<Reservation>();
      Reservation reservation0 = new Reservation();
      reservation0.setReservationId("totalCost");
      arrayList0.add(reservation0);
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      reservation0.setSelectedRoom("Reservation successfully audeD.");
      // Undeclared exception!
      try { 
        reservationController0.updateReservation(reservation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find: localhost
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 192);
      // Undeclared exception!
      try { 
        ReservationController.sendPostRequest((Date) null, mockDate0, "TypedExampleMatcher(nullHandler=", "TypedExampleMatcher(nullHandler=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ArrayList<Reservation> arrayList0 = new ArrayList<Reservation>();
      Reservation reservation0 = new Reservation();
      reservation0.setSelectedRoom("\"}");
      reservation0.setReservationId("totalCost");
      arrayList0.add(reservation0);
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      // Undeclared exception!
      try { 
        reservationController0.deleteReservation("totalCost");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find: localhost
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ArrayList<Reservation> arrayList0 = new ArrayList<Reservation>();
      Reservation reservation0 = new Reservation();
      reservation0.setReservationId("totalCost");
      arrayList0.add(reservation0);
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      // Undeclared exception!
      try { 
        reservationController0.updateReservation(reservation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      LinkedList<Reservation> linkedList0 = new LinkedList<Reservation>();
      Reservation reservation0 = new Reservation();
      reservation0.setReservationId("N:c2?!>WKcR (4N4C;%");
      linkedList0.add(reservation0);
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      Reservation reservation1 = new Reservation();
      reservationController0.updateReservation(reservation1);
      assertNull(reservation1.getSelectedRoom());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ArrayList<Reservation> arrayList0 = new ArrayList<Reservation>();
      Reservation reservation0 = new Reservation();
      reservation0.setReservationId("totalCost");
      arrayList0.add(reservation0);
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      // Undeclared exception!
      try { 
        reservationController0.deleteReservation("totalCost");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ArrayList<Reservation> arrayList0 = new ArrayList<Reservation>();
      Reservation reservation0 = new Reservation();
      reservation0.setReservationId("totalCost");
      arrayList0.add(reservation0);
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      reservationController0.deleteReservation("Reservation successfully audeD.");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ArrayList<Reservation> arrayList0 = new ArrayList<Reservation>();
      Reservation reservation0 = new Reservation();
      reservation0.setReservationId("totalCost");
      arrayList0.add(reservation0);
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      Reservation reservation1 = reservationController0.getReservation("totalCost");
      assertNull(reservation1.getCustomerId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ArrayList<Reservation> arrayList0 = new ArrayList<Reservation>();
      Reservation reservation0 = new Reservation();
      reservation0.setReservationId("totalCost");
      arrayList0.add(reservation0);
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      // Undeclared exception!
      try { 
        reservationController0.getReservation("aGS5\"(p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      LinkedList<Reservation> linkedList0 = new LinkedList<Reservation>();
      Reservation reservation0 = new Reservation();
      linkedList0.add(reservation0);
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      // Undeclared exception!
      try { 
        reservationController0.getReservation("N:c2?!>WKcR (4N4C;%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      Double double0 = new Double(0.0);
      String string0 = "?FzXQ`&Wojz7{";
      // Undeclared exception!
      try { 
        reservationController0.getReservationParam((String) null, (String) null, (String) null, (Double) null, double0, "%Ee$,3Vzy", "?FzXQ`&Wojz7{", "rBF)QtO5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      Double double0 = new Double(1.0);
      Double double1 = new Double(180.4193601354);
      // Undeclared exception!
      try { 
        reservationController0.getReservationParam((String) null, (String) null, (String) null, double0, double1, "\"}", "Hcz~=v!3A5`6?acy_ ", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      LinkedList<Reservation> linkedList0 = new LinkedList<Reservation>();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      Double double0 = new Double(1295.158739798458);
      // Undeclared exception!
      try { 
        reservationController0.getReservationParam("L", (String) null, "L", double0, double0, "L", "=fr&", "=fr&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ArrayList<Reservation> arrayList0 = new ArrayList<Reservation>();
      Reservation reservation0 = new Reservation();
      reservation0.setSelectedRoom("CT8r(z");
      reservation0.setReservationId("totalCost");
      arrayList0.add(reservation0);
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      // Undeclared exception!
      try { 
        reservationController0.getReservationParam("tot@lcost", "9lCost", (String) null, (Double) null, (Double) null, "aGS5\"(p", "totalCost", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ArrayList<Reservation> arrayList0 = new ArrayList<Reservation>();
      Reservation reservation0 = new Reservation();
      reservation0.setReservationId("totalCost");
      arrayList0.add(reservation0);
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      reservation0.setCustomerId("totalCost");
      // Undeclared exception!
      try { 
        reservationController0.getReservationParam("totalCost", "totalCost", "totalCost", (Double) null, (Double) null, "REGEX", "%Ee$,3Vzy", "I$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ArrayList<Reservation> arrayList0 = new ArrayList<Reservation>();
      Reservation reservation0 = new Reservation();
      reservation0.setReservationId("totalCost");
      arrayList0.add(reservation0);
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      Double double0 = new Double(0.0);
      reservation0.setTotalCost(double0);
      reservation0.setCustomerId("");
      // Undeclared exception!
      try { 
        reservationController0.getReservationParam("totalCost", "totalCost", "totalCost", double0, double0, "REGEX", "%Ee$,3Vzy", "I$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ArrayList<Reservation> arrayList0 = new ArrayList<Reservation>();
      Reservation reservation0 = new Reservation();
      reservation0.setReservationId("totalCost");
      arrayList0.add(reservation0);
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      Double double0 = new Double(1411.831457371507);
      // Undeclared exception!
      try { 
        reservationController0.getReservationParam("", "", "", double0, double0, "", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ArrayList<Reservation> arrayList0 = new ArrayList<Reservation>();
      arrayList0.add((Reservation) null);
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      Double double0 = Double.valueOf((-2876.5833458));
      // Undeclared exception!
      try { 
        reservationController0.getReservationParam((String) null, "^Q\".I|?w6$Wm", "^Q\".I|?w6$Wm", (Double) null, double0, "\",\"roomType\":\"", "wd!rn", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "reservationRepository", (Object) reservationRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      Double double0 = new Double((-1.0));
      // Undeclared exception!
      try { 
        reservationController0.getReservationParam("", "M9;6eb9!j11oX@Y.A", (String) null, double0, double0, (String) null, "", "k%OE[>F14If{ J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.ReservationController", e);
      }
  }
}
