/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 05 22:31:38 GMT 2018
 */

package com.catalyte.training.hotel_room_booking.Controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.catalyte.training.hotel_room_booking.Controllers.RoomController;
import com.catalyte.training.hotel_room_booking.Entities.Room;
import com.catalyte.training.hotel_room_booking.Repositories.RoomRepository;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RoomController_ESTest extends RoomController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      Stack<Room> stack0 = new Stack<Room>();
      Room room0 = new Room();
      Integer integer0 = new Integer(0);
      room0.setRoomUsed(integer0);
      room0.setRoomType("http://localhost:8080/Rooms");
      stack0.add(room0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(roomRepository0).findAll();
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      // Undeclared exception!
      try { 
        roomController0.changeInUse("http://localhost:8080/Rooms", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.RoomController", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      // Undeclared exception!
      try { 
        roomController0.updateRoom(", matcher=", double0, (Integer) null, "wal%XghdX?)K", double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // protocol doesn't support output
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.RoomController", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      roomController0.roomRepository = null;
      // Undeclared exception!
      try { 
        roomController0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.RoomController", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      Stack<Room> stack0 = new Stack<Room>();
      Room room0 = new Room();
      room0.setRoomType("http://localhost:8080/Rooms");
      stack0.add(room0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(roomRepository0).findAll();
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      // Undeclared exception!
      try { 
        roomController0.deleteRoom("http://localhost:8080/Rooms", (Double) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // protocol doesn't support output
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.RoomController", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      Stack<Room> stack0 = new Stack<Room>();
      Room room0 = new Room();
      room0.setRoomType("p=EmORa+");
      stack0.add(room0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(roomRepository0).findAll();
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      Double double0 = new Double(3);
      // Undeclared exception!
      try { 
        roomController0.deleteRoom("ZPOtVB-", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // protocol doesn't support output
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.RoomController", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      Stack<Room> stack0 = new Stack<Room>();
      Room room0 = new Room();
      stack0.add(room0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(roomRepository0).findAll();
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      Double double0 = new Double(3);
      // Undeclared exception!
      try { 
        roomController0.deleteRoom("ZPOtVB-", double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      Stack<Room> stack0 = new Stack<Room>();
      Room room0 = new Room();
      Integer integer0 = new Integer(1022);
      stack0.add(room0);
      room0.setRoomCount(integer0);
      room0.setRoomUsed(integer0);
      room0.setRoomType("http://localhost:8080/Rooms");
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(roomRepository0).findAll();
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      // Undeclared exception!
      try { 
        roomController0.changeInUse("http://localhost:8080/Rooms", 1022);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.RoomController", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      Stack<Room> stack0 = new Stack<Room>();
      Room room0 = new Room();
      Integer integer0 = new Integer(1022);
      room0.setRoomUsed(integer0);
      room0.setRoomType("2");
      stack0.add(room0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(roomRepository0).findAll();
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      // Undeclared exception!
      try { 
        roomController0.changeInUse("2", (-3073));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.RoomController", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      Stack<Room> stack0 = new Stack<Room>();
      Room room0 = new Room();
      room0.setRoomType("2");
      stack0.add(room0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(roomRepository0).findAll();
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      roomController0.changeInUse("3", (-3073));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      Stack<Room> stack0 = new Stack<Room>();
      Room room0 = new Room();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://localhost:8080/Rooms?roomType=\n}");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "2");
      room0.setRoomType("2");
      stack0.add(room0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(roomRepository0).findAll();
      doReturn((long)1022).when(roomRepository0).count();
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      // Undeclared exception!
      try { 
        roomController0.getRooms("\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.RoomController", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      Stack<Room> stack0 = new Stack<Room>();
      Room room0 = new Room();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://localhost:8080/Rooms?roomType=\n}");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "2");
      stack0.add(room0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(roomRepository0).findAll();
      doReturn((long)1022).when(roomRepository0).count();
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      // Undeclared exception!
      try { 
        roomController0.getRooms("\n}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(4L).when(roomRepository0).count();
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      // Undeclared exception!
      try { 
        roomController0.getRooms("~u(pauU,U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find: localhost
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.RoomController", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      Integer integer0 = new Integer(1784);
      Double double0 = new Double(1784);
      // Undeclared exception!
      try { 
        roomController0.createRoomType("http://localhost:8080/Rooms", double0, integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // protocol doesn't support output
         //
         verifyException("com.catalyte.training.hotel_room_booking.Controllers.RoomController", e);
      }
  }
}
